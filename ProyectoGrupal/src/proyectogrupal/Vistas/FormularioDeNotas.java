/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package proyectogrupal.Vistas;

import java.beans.PropertyVetoException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectogrupal.AccesoADatos.AlumnoData;
import proyectogrupal.AccesoADatos.InscripcionData;
import proyectogrupal.Entidades.Alumno;
import proyectogrupal.Entidades.Inscripcion;


/**
 *
 * @author Cristian Rodriguez
 */
public class FormularioDeNotas extends javax.swing.JInternalFrame {

    private DefaultTableModel tabla = new DefaultTableModel();

    /**
     * Creates new form FormularioDeNotas
     */
    public FormularioDeNotas() {
        initComponents();
        CargarEncabezadoTabla();
        CargarComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Carga de Notas");

        jLabel2.setText("Seleccione un alumno:");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(62, 62, 62)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // Limpia la tabla antes de agregar nuevas filas
        limpiarTabla();

        // Obtiene el alumno seleccionado del JComboBox
        Alumno alumnoSeleccionado = (Alumno) jComboBox1.getSelectedItem();

        // Verifica si se ha seleccionado un alumno
        // Obtiene las inscripciones del alumno seleccionado
        InscripcionData inscripcionData = new InscripcionData();
        List<Inscripcion> inscripciones = inscripcionData.obtenerInscripcionesPorAlumno(alumnoSeleccionado.getIdalumno());

        // Agrega las inscripciones a la tabla
        for (Inscripcion inscripcion : inscripciones) {
            tabla.addRow(new Object[]{
                inscripcion.getIdMateria(),
                inscripcion.getMateria().getNombre(), // Obtén el nombre de la materia
                inscripcion.getNota()
            });
        }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            this.setClosed(true);
        } catch (PropertyVetoException ex) {
            System.err.println("Closing Exception");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            try {
        // Obtén el alumno seleccionado del JComboBox
        Alumno alumnoSeleccionado = (Alumno) jComboBox1.getSelectedItem();

        // Verifica si se ha seleccionado un alumno
        if (alumnoSeleccionado != null) {
            int idAlumno = alumnoSeleccionado.getIdalumno();
            // Obtén la fila seleccionada del jTable1
            int filaSeleccionada = jTable1.getSelectedRow();
            
            if (filaSeleccionada != -1) {
                // Obtén el ID de la materia desde la fila seleccionada del jTable1
                int idMateria = (int) jTable1.getValueAt(filaSeleccionada, 0);

                // Solicita la nueva nota al usuario
                String nuevaNotaStr = JOptionPane.showInputDialog("Ingrese la nota de la materia " + jTable1.getValueAt(filaSeleccionada, 1) + ":");

                if (nuevaNotaStr != null) {
                    double nuevaNota = Double.parseDouble(nuevaNotaStr);

                    // Validar que la nota sea mayor o igual a 1
                    if (nuevaNota >= 1) {
                        // Llama a la función para actualizar la nota
                        InscripcionData insAlumno = new InscripcionData();
                        insAlumno.ActualizarNota(idAlumno, idMateria, nuevaNota);

                        // Muestra un mensaje de éxito y refresca la tabla
                        JOptionPane.showMessageDialog(this, "Materia actualizada.");
                        
                        refreshTable();

                    } else {
                        JOptionPane.showMessageDialog(this, "La nota ingresada es inválida. Debe ser mayor o igual a 1.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una materia de la tabla.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un alumno del combo.");
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Se ha ingresado una nota no válida.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<Alumno> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void limpiarTabla() {
        int f = jTable1.getRowCount() - 1;
        for (int x = f; x >= 0; x--) {
            tabla.removeRow(x);
        }
    }

    private void CargarEncabezadoTabla() {
        tabla.addColumn("Codigo");
        tabla.addColumn("Nombre");
        tabla.addColumn("Nota");
        jTable1.setModel(tabla);
    }

    private void CargarComboBox() {
        AlumnoData aludata = new AlumnoData();
        for (Alumno a : aludata.listarAlumnos()) {
            jComboBox1.addItem(a);
        }
    }
    private void refreshTable() {
    // Supongamos que tienes una instancia de DefaultTableModel llamada 'tablaModel' asociada a tu jTable1
    DefaultTableModel tablaModel = (DefaultTableModel) jTable1.getModel();
    
    // Limpia todas las filas existentes en la tabla
    tablaModel.setRowCount(0);

    // Limpia la tabla antes de agregar nuevas filas
        limpiarTabla();

        // Obtiene el alumno seleccionado del JComboBox
        Alumno alumnoSeleccionado = (Alumno) jComboBox1.getSelectedItem();

        // Verifica si se ha seleccionado un alumno
        // Obtiene las inscripciones del alumno seleccionado
        InscripcionData inscripcionData = new InscripcionData();
        List<Inscripcion> inscripciones = inscripcionData.obtenerInscripcionesPorAlumno(alumnoSeleccionado.getIdalumno());

        // Agrega las inscripciones a la tabla
        for (Inscripcion inscripcion : inscripciones) {
            tabla.addRow(new Object[]{
                inscripcion.getIdMateria(),
                inscripcion.getMateria().getNombre(), // Obtén el nombre de la materia
                inscripcion.getNota()
            });
        }
}

}
